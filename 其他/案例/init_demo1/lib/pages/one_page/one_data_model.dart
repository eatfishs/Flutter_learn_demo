///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class OneDataModelResult {
/*
{
  "Asset": "AXS",
  "AssetLong": "Axie Infinity Shard",
  "MinConfirmation": 4,
  "WithdrawTxFee": 0,
  "WithdrawTxFeePercent": 0,
  "SystemProtocol": "ETHERC20",
  "IsActive": true,
  "InfoMessage": "",
  "MaintenanceMode": false,
  "MaintenanceMessage": "",
  "FormatPrefix": "",
  "FormatSufix": "",
  "DecimalSeparator": ".",
  "ThousandSeparator": ",",
  "DecimalPlaces": 8,
  "withdrawal_fee_schedule": ""
}
*/

  String? Asset;
  String? AssetLong;
  int? MinConfirmation;
  int? WithdrawTxFee;
  int? WithdrawTxFeePercent;
  String? SystemProtocol;
  bool? IsActive;
  String? InfoMessage;
  bool? MaintenanceMode;
  String? MaintenanceMessage;
  String? FormatPrefix;
  String? FormatSufix;
  String? DecimalSeparator;
  String? ThousandSeparator;
  int? DecimalPlaces;
  String? withdrawalFeeSchedule;

  OneDataModelResult({
    this.Asset,
    this.AssetLong,
    this.MinConfirmation,
    this.WithdrawTxFee,
    this.WithdrawTxFeePercent,
    this.SystemProtocol,
    this.IsActive,
    this.InfoMessage,
    this.MaintenanceMode,
    this.MaintenanceMessage,
    this.FormatPrefix,
    this.FormatSufix,
    this.DecimalSeparator,
    this.ThousandSeparator,
    this.DecimalPlaces,
    this.withdrawalFeeSchedule,
  });
  OneDataModelResult.fromJson(Map<String, dynamic> json) {
    Asset = json['Asset']?.toString();
    AssetLong = json['AssetLong']?.toString();
    MinConfirmation = json['MinConfirmation']?.toInt();
    WithdrawTxFee = json['WithdrawTxFee']?.toInt();
    WithdrawTxFeePercent = json['WithdrawTxFeePercent']?.toInt();
    SystemProtocol = json['SystemProtocol']?.toString();
    IsActive = json['IsActive'];
    InfoMessage = json['InfoMessage']?.toString();
    MaintenanceMode = json['MaintenanceMode'];
    MaintenanceMessage = json['MaintenanceMessage']?.toString();
    FormatPrefix = json['FormatPrefix']?.toString();
    FormatSufix = json['FormatSufix']?.toString();
    DecimalSeparator = json['DecimalSeparator']?.toString();
    ThousandSeparator = json['ThousandSeparator']?.toString();
    DecimalPlaces = json['DecimalPlaces']?.toInt();
    withdrawalFeeSchedule = json['withdrawal_fee_schedule']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['Asset'] = Asset;
    data['AssetLong'] = AssetLong;
    data['MinConfirmation'] = MinConfirmation;
    data['WithdrawTxFee'] = WithdrawTxFee;
    data['WithdrawTxFeePercent'] = WithdrawTxFeePercent;
    data['SystemProtocol'] = SystemProtocol;
    data['IsActive'] = IsActive;
    data['InfoMessage'] = InfoMessage;
    data['MaintenanceMode'] = MaintenanceMode;
    data['MaintenanceMessage'] = MaintenanceMessage;
    data['FormatPrefix'] = FormatPrefix;
    data['FormatSufix'] = FormatSufix;
    data['DecimalSeparator'] = DecimalSeparator;
    data['ThousandSeparator'] = ThousandSeparator;
    data['DecimalPlaces'] = DecimalPlaces;
    data['withdrawal_fee_schedule'] = withdrawalFeeSchedule;
    return data;
  }
}

class OneDataModel {
/*
{
  "success": true,
  "message": "",
  "result": [
    {
      "Asset": "AXS",
      "AssetLong": "Axie Infinity Shard",
      "MinConfirmation": 4,
      "WithdrawTxFee": 0,
      "WithdrawTxFeePercent": 0,
      "SystemProtocol": "ETHERC20",
      "IsActive": true,
      "InfoMessage": "",
      "MaintenanceMode": false,
      "MaintenanceMessage": "",
      "FormatPrefix": "",
      "FormatSufix": "",
      "DecimalSeparator": ".",
      "ThousandSeparator": ",",
      "DecimalPlaces": 8,
      "withdrawal_fee_schedule": ""
    }
  ]
}
*/

  bool? success;
  String? message;
  List<OneDataModelResult?>? result;

  OneDataModel({
    this.success,
    this.message,
    this.result,
  });
  OneDataModel.fromJson(Map<String, dynamic> json) {
    success = json['success'];
    message = json['message']?.toString();
    if (json['result'] != null) {
      final v = json['result'];
      final arr0 = <OneDataModelResult>[];
      v.forEach((v) {
        arr0.add(OneDataModelResult.fromJson(v));
      });
      result = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['success'] = success;
    data['message'] = message;
    if (result != null) {
      final v = result;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['result'] = arr0;
    }
    return data;
  }
}
